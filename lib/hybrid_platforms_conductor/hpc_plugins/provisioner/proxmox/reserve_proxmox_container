#!/usr/bin/env ruby
# This scripts creates and destroys containers in an atomic way in a Proxmox cluster.
# It handles:
# * An intelligent resources allocation algorithm to balance usage among cluster PVE nodes.
# * A retry mechanism if the resources are fully reserved.
# * An expiration mechanism that removes expired containers before assigning new ones to protect resources.
# It guarantees that:
# * Any IP and VM ID reserved through this script will not be reserved by another concurrent process (unless the container becomes expired).
# * If creation is granted, creating this container will not exceed resources limits specified in the config.
# * The returned reserved VM ID and IP are already created.

# Usage: ./reserve_proxmox_container [options]
#     -c, --create FILE                Create a VM with the configuration stored in a given JSON file
#     -d, --destroy FILE               Destroy a VM with the configuration stored in a given JSON file
#     -h, --help                       Display help and exit
#     -m, --max-retries NBR            Set the maximum number of retries to attempt (default: 240)
#     -o, --config FILE                Set the path to the file storing configuration (default: ./config.json)
#     -w, --wait-before-retry SECS     Set the number of seconds to wait between retries (default: 4)

# Result:
# There can be some logs but the script ends with a line containing '===== JSON =====' followed by parseable JSON.
# Resulting JSON has the following structure in case of success:
# * *pve_node* (String): Name of the pve node on which the creation has been reserved
# * *vm_id* (Integer): VM ID reserved
# * *vm_ip* (String): VM IP reserved
# Resulting JSON has the following structure in case of error:
# * *error* (String): The error message

# Uses:
# * A config file (given through --config option) that describes the available resources as JSON.
#   Check ProxmoxWaiter#initialize signature for the structure's description of this file.
# * The environment variables:
#   * *hpc_user_for_proxmox*: User to be used to query Proxmox API
#   * *hpc_password_for_proxmox*: Password to be used to query Proxmox API
#   * *hpc_realm_for_proxmox*: Realm used to connect to the Proxmox API [default = 'pam']

require 'English'
require 'json'

reserved_resource = nil

begin
  # As this script is meant to be run in an SSH session, make sure we automatically flush stdout/stderr.
  # Otherwise it will wait for the script completion before dumping everything, which is annoying as we want to track when it waits for hours.
  $stdout.sync = true
  $stderr.sync = true

  require 'optparse'
  require 'time'
  require 'tmpdir'
  require "#{__dir__}/proxmox_waiter"

  # Define here default values
  create_info = nil
  destroy_info = nil
  wait_time_before_retry_secs = 60
  # Don't hesitate to retry for a few hours, as resources are taken by tests that can run for a few hours sometimes.
  max_retries = 240
  config_file = "#{__dir__}/config.json"

  OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
    opts.on('-c', '--create FILE', 'Create a VM with the configuration stored in a given JSON file') do |file|
      create_info = JSON.parse(File.read(file))
    end
    opts.on('-d', '--destroy FILE', 'Destroy a VM with the configuration stored in a given JSON file') do |file|
      destroy_info = JSON.parse(File.read(file))
    end
    opts.on('-h', '--help', 'Display help and exit') do
      puts opts
      exit 0
    end
    opts.on('-m', '--max-retries NBR', "Set the maximum number of retries to attempt (default: #{max_retries})") do |nbr|
      max_retries = Integer(nbr)
    end
    opts.on('-o', '--config FILE', "Set the path to the file storing configuration (default: #{config_file})") do |file|
      config_file = file
    end
    opts.on('-w', '--wait-before-retry SECS', "Set the number of seconds to wait between retries (default: #{wait_time_before_retry_secs})") do |secs|
      wait_time_before_retry_secs = Integer(secs)
    end
  end.parse!

  raise 'Either use --create or --destroy options. Not both.' if create_info && destroy_info

  proxmox_waiter = ProxmoxWaiter.new(
    config_file,
    ENV.fetch('hpc_user_for_proxmox', nil),
    ENV.fetch('hpc_password_for_proxmox', nil),
    ENV['hpc_realm_for_proxmox'] || 'pam'
  )

  idx_retry = 0
  while idx_retry < max_retries
    reserved_resource =
      if destroy_info.nil?
        puts "[ #{Time.now.utc.strftime('%F %T')} ] - Create #{create_info} in a Proxmox container (attempt ##{idx_retry}/#{max_retries})"
        proxmox_waiter.create(create_info)
      else
        puts "[ #{Time.now.utc.strftime('%F %T')} ] - Destroy #{destroy_info} (attempt ##{idx_retry}/#{max_retries})"
        proxmox_waiter.destroy(destroy_info)
      end
    break unless reserved_resource.is_a?(Symbol)

    # We got an error (missing resources, IPs...).
    # Try again.
    puts "Could not perform the operation because of error: #{reserved_resource}. Waiting #{wait_time_before_retry_secs} seconds before trying again."
    reserved_resource = { error: reserved_resource }
    sleep wait_time_before_retry_secs
    idx_retry += 1
  end
rescue
  reserved_resource = {
    error: "Unhandled exception from reserve_proxmox_container: #{$ERROR_INFO}\n#{$ERROR_INFO.backtrace.join("\n")}"
  }
end

puts '===== JSON ====='
puts reserved_resource.to_json
