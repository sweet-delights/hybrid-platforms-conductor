# This file defines rules for spec files only.

inherit_from:
  - ../.rubocop.yml

AllCops:
  NewCops: enable

RSpec:
  Language:
    Expectations:
      - with_serverless_chef_platforms
      - with_test_platform
      - with_test_platform_for_remote_testing
      - with_test_podman_platform
      - with_test_proxmox_platform

# Empty blocks are perfectly valid, especially in test cases
# Configuration parameters: AllowComments, AllowEmptyLambdas.
Lint/EmptyBlock:
  Enabled: false

# In case of mocking some methods, keyword arguments may be called but not used in the testing code block
# Cop supports --auto-correct.
# Configuration parameters: IgnoreEmptyBlocks, AllowUnusedKeywordArguments.
Lint/UnusedBlockArgument:
  AllowUnusedKeywordArguments: true

# In the tests we simulate running executables by overriding $0
# Offense count: 2
# Configuration parameters: EnforcedStyle, CheckMethodNames, CheckSymbols, AllowedIdentifiers, AllowedPatterns.
# SupportedStyles: snake_case, normalcase, non_integer
# AllowedIdentifiers: TLS1_1, TLS1_2, capture3, iso8601, rfc1123_date, rfc822, rfc2822, rfc3339, x86_64
Naming/VariableNumber:
  Exclude:
    - 'hybrid_platforms_conductor_test/helpers/executables_helpers.rb'


# Executables tests are not linked to a given class/module, so skip this cop for them.
# Configuration parameters: IgnoredMetadata.
RSpec/DescribeClass:
  Exclude:
    - 'hybrid_platforms_conductor_test/docs_spec.rb'
    - 'hybrid_platforms_conductor_test/rubocop_spec.rb'
    - 'hybrid_platforms_conductor_test/executables/**/*'

# Examples can be complex and limiting them might produce useless methods calls complexity
# Configuration parameters: CountAsOne.
RSpec/ExampleLength:
  Exclude:
    - '**/*'

# Offense count: 86
# Configuration parameters: Include, CustomTransform, IgnoreMethods, IgnoreMetadata.
# Include: **/*_spec.rb
RSpec/SpecFilePathFormat:
  Enabled: false

# Message expectations and test spies respond to a different testing usecase, and one can not always replace the other.
# Configuration parameters: .
# SupportedStyles: have_received, receive
RSpec/MessageSpies:
  Exclude:
    - '**/*'

# Multiple expectations serve in checking a feature as a whole, and removes the performance hit of re-instantiating subjects between test cases.
RSpec/MultipleExpectations:
  Exclude:
    - '**/*'

# Separating the mocking from the expectation duplicates the code and increases the risk of human errors.
RSpec/StubbedMock:
  Exclude:
    - '**/*'
